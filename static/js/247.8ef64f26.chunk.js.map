{"version":3,"file":"static/js/247.8ef64f26.chunk.js","mappings":"gOAqEA,UA9Da,WACX,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0CH,EAAAA,EAAAA,WAAS,GAAnD,eAAOK,EAAP,KAAsBC,EAAtB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACRD,GAAiB,GAEZH,IAILK,EAAAA,EAAAA,IAAiBL,GACdM,MAAK,SAAAC,GACJ,GAAIA,EAAST,KAAKU,OAAS,EAGzB,OAFAT,EAAQ,WACRI,GAAiB,GAGnBJ,EAAQQ,EAAST,MACjBK,GAAiB,EAClB,IACAM,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,GACb,GAAE,CAACV,KAGF,gCACGF,GACC,SAAC,KAAD,UACGA,EAAKe,KAAI,SAAAC,GACR,OACE,0BACGA,EAAMC,cACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAG,UAAKH,EAAMI,eACdC,MAAM,SAGR,gBACEH,IAAKI,EACLH,IAAKH,EAAMI,cACXC,MAAM,MACNE,OAAO,SAGX,UAAC,KAAD,WACGP,EAAMI,cAAc,QAAI,kBACxBJ,EAAMQ,eAjBFR,EAAMS,QAqBlB,OAGH,SAAC,KAAD,UAAM,8CAEPrB,IAAiB,SAAC,IAAD,MAGvB,C,qICjEYsB,EAAWC,EAAAA,EAAAA,GAAH,4EAMRC,EAAQD,EAAAA,EAAAA,EAAH,kFAMLE,EAAOF,EAAAA,EAAAA,EAAH,kE,kMCXXG,EAAW,gCACXC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,cACE,6NACFC,OAAQ,qBAICC,EAAc,mCAAG,oGACLC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,qCAErBC,GAH0B,cACtBtB,EADsB,yBAKrBA,EAAS6B,MALY,2CAAH,qDAQdC,EAAc,mCAAG,WAAMC,GAAN,uFACLH,EAAAA,EAAAA,IAAA,UAClBP,EADkB,8BACYU,EADZ,WAErBT,GAH0B,cACtBtB,EADsB,yBAKrBA,EAAS6B,MALY,2CAAH,sDAQdG,EAAY,mCAAG,WAAMvC,GAAN,uFACHmC,EAAAA,EAAAA,IAAA,UAAaP,EAAb,iBAA8B5B,GAAW6B,GADtC,cACpBtB,EADoB,yBAEnBA,EAAS6B,MAFU,2CAAH,sDAKZ/B,EAAgB,mCAAG,WAAML,GAAN,uFACPmC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACD5B,EADC,YAErB6B,GAH4B,cACxBtB,EADwB,yBAKvBA,EAAS6B,MALc,2CAAH,sDAQhBI,EAAe,mCAAG,WAAMxC,GAAN,uFACNmC,EAAAA,EAAAA,IAAA,UAClBP,EADkB,iBACD5B,EADC,YAErB6B,GAH2B,cACvBtB,EADuB,yBAKtBA,EAAS6B,MALa,2CAAH,qD","sources":["components/Cast/Cast.jsx","components/Cast/Cast.styled.jsx","services/api.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCastInfo } from '../../services/api';\nimport Loader from '../Loader/Loader';\nimport { CastList, Actor, Info } from './Cast.styled';\nimport defaultImage from '../../images/default-image.jpg';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n  const [visibleLoader, setVisibleLoader] = useState(false);\n\n  useEffect(() => {\n    setVisibleLoader(true);\n\n    if (!movieId) {\n      return;\n    }\n\n    getMovieCastInfo(movieId)\n      .then(response => {\n        if (response.cast.length < 1) {\n          setCast(null);\n          setVisibleLoader(false);\n          return;\n        }\n        setCast(response.cast);\n        setVisibleLoader(false);\n      })\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  return (\n    <>\n      {cast ? (\n        <CastList>\n          {cast.map(actor => {\n            return (\n              <li key={actor.cast_id}>\n                {actor.profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                    alt={`${actor.original_name}`}\n                    width=\"150\"\n                  ></img>\n                ) : (\n                  <img\n                    src={defaultImage}\n                    alt={actor.original_name}\n                    width=\"150\"\n                    height=\"225\"\n                  ></img>\n                )}\n                <Actor>\n                  {actor.original_name} as <br />\n                  {actor.character}\n                </Actor>\n              </li>\n            );\n          })}\n        </CastList>\n      ) : (\n        <Info>We don't have any cast-info to this movie</Info>\n      )}\n      {visibleLoader && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const Actor = styled.p`\n  width: 150px;\n  text-align: center;\n  margin: 5px 0;\n`;\n\nexport const Info = styled.p`\n  font-weight: 600;\n  margin-left: 40px;\n`;\n","import axios from 'axios';\n\n//const API_KEY = '265f78c728b685275d7bdd6274612da2';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiMTZlYWZhMmEzOTE3ZDU3ZGQzMGRhOTZhOWQxOTg5MCIsInN1YiI6IjY0ODgzZjcyZTI3MjYwMDBjOTMyMjM2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.XdPSLtTSAZv4fw0M0gYehYEL9mjnuAiltEwvVoL-DaE',\n    accept: 'application/json',\n  },\n};\n\nexport const getTrendMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getSearchMovie = async movieName => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?query=${movieName}&page=1`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieItem = async movieId => {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, options);\n  return response.data;\n};\n\nexport const getMovieCastInfo = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    options\n  );\n  return response.data;\n};\n"],"names":["useState","cast","setCast","movieId","useParams","visibleLoader","setVisibleLoader","useEffect","getMovieCastInfo","then","response","length","catch","err","console","error","map","actor","profile_path","src","alt","original_name","width","defaultImage","height","character","cast_id","CastList","styled","Actor","Info","BASE_URL","options","method","headers","Authorization","accept","getTrendMovies","axios","data","getSearchMovie","movieName","getMovieItem","getMovieReviews"],"sourceRoot":""}